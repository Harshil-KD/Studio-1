                                 USE CASE QUERIES
		
I. STUDENTS

. View their personal information like name, email, phone, address, DOB, gender 
SELECT 
Students_ID,
Student_First name , 
Student_Last name,
Student_Email,
Student_Phone,
Student_Address,
Student_DOB,
Student_Gender,
Student.Parent_id,

FROM Student
			INNER JOIN Parents ON (Parents.Parent_ID = Student.Parent_ID)
			
2.    	View their academic enrolment	
SELECT
Student.ID_Course_Enrollment,
Student_First name,
Student_Last name,
Course_Enrollement.Course_ID,
Academic_Course_Enrollement,
Academic_Course.Day,

FROM Course_Enrollement
INNER JOIN STUDENTS ON (Course_Enrollement.STUDENTS_ID = STUDENTS.STUDENTS_ID)

3. 	View available courses
SELECT
Academic_Course.Course_ID,
Academic_Course.Course_Name,
Academic_Course.Teacher_Name,
Academic_Course.Teacher_Email,
Academic_Course.Period,
Academic_Course.Day,
Academic_Course.Start_Time,
Academic_Course.End_Time,
Academic_Course.Duration

FROM Academic_Course
INNER JOIN Course_Enrollment ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
	
4.View academic course schedule.
SELECT
Course_Enrollment.Student_ID,
Student.First_Name,
Academic_Course.Course_Name,
Academic_Course.Start_Time,
Academic_Course.End_Time,
Academic_Course.Duration,
Academic_Course.Enrollment_Date,

ROM Course_Enrollment
INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
	
5. View their after-school activity schedule.
SELECT
AfterSchoolActivity.Activity_Name,
AfterSchoolActivity.Start_Time,
AfterSchoolActivity.End_Time,
AfterSchoolActivity.Duration,

FROM Activity_Enrollment
INNER JOIN AfterSchoolActivity ON (Activity_Enrollment.Activity_ID = AfterSchoolActivity.Activity_ID)

6.View their extracurricular activity participation
SELECT
SELECT DISTINCT
AfterSchoolActivity.Activity_ID,
AfterSchoolActivity.Activity_Name,
AfterSchoolActivity.Activity_Description,
AfterSchoolActivity.Activity_Instructor,
AfterSchoolActivity.Activity_Start_Time,
AfterSchoolActivity.Activity_End_Time,
AfterSchoolActivity.Duration

FROM AfterSchoolActivity
INNER JOIN Activity_Enrollment ON (Activity_Enrollment.Activity_ID = AfterSchoolActivity.Activity_ID)
WHERE Activity_Enrollment.Student_ID NOT LIKE "S001";

II.    Teachers or instructors

7.View and manage their courses Like create, modify, or delete course details
         View
SELECT

FROM Academic_Course
WHERE Academic_Course.Teacher_Name = "Ms. Johnson";
           
		   MANAGE
UPDATE Academic_Course
SET Start_Time = "8:50"
WHERE Academic_Course.Course_ID = "C001";

UPDATE Academic_Course
SET End_Time = "9:30"
WHERE Academic_Course.Course_ID = "C001";

DELETE FROM Course_Enrollment
WHERE Course_Enrollment.Student_ID = "S014";


SELECT
Course_Enrollment.Student_ID,
Student.First_Name,
Student.Last_Name
			FROM Course_Enrollment
			INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
			INNER JOIN Student ON (Course_Enrollment.Student_ID = Student.Student_ID)
			WHERE 
				Course_Enrollment.Course_ID = "C010" OR 
				Academic_Course.Course_Name = "Art" OR 
				Academic_Course.Teacher_Name = "Ms. CLARK";
	
SELECT 

FROM Academic_Course
WHERE Academic_Course.Teacher_Name = "Ms. Johnson"

8.     View their course enrolments.
SELECT
Course_Enrollment.Student_ID,
Student.First_Name,
Student.Last_Name

FROM Course_Enrollment

INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)

WHERE 
Course_Enrollment.Course_ID = "C010" OR 
Academic_Course.Course_Name = "Art" OR 
Academic_Course.Teacher_Name = "Ms. Clark";

9. View and manage their students (access their personal information, communicate with them via email, class schedule.)

SELECT
Students_ID,
Student_First name , 
Student_Last name,
Student_Email,
Student_Phone,
Student_Address,
Student_DOB,
Student_Gender,
Student.Parent_id,

FROM Course_Enrollment
INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
INNER JOIN Student ON (Course_Enrollment.Student_ID = Student.Student_ID)
LEFT JOIN Parents ON (Parents.Parent_ID = Student.Parent_ID)
			WHERE 
				Course_Enrollment.Course_ID = "C010" OR 
				Academic_Course.Course_Name = "Art" OR 
				Academic_Course.Teacher_Name = "Ms. Clark";
				
10.View and manage extracurricular activities
        View
SELECT
FROM AfterSchoolActivity
WHERE AfterSchoolActivity.Activity_Instructor = "Coach Johnson";

          MANAGE
SELECT
FROM AfterSchoolActivity
WHERE AfterSchoolActivity.Activity_Instructor = "Coach Johnson";

UPDATE AfterSchoolActivity
SET Activity_Address = "Auckland Gymnasium"
WHERE Activity_ID = "AS01";
			
SELECT
FROM AfterSchoolActivity
WHERE AfterSchoolActivity.Activity_Instructor = "Coach Johnson";

11.View student’s parents’ information.
	
			SELECT
				Student.Parent_ID,
				Course_Enrollment.Student_ID,
				Parents.Last_Name,
				Parents.First_Name,
				Student.First_Name,
				Parents.Parent_Email,
				Parents.Parent_Phone,
				Parents.Parent_Address,
				Student.Student_Gender,
				
			FROM Course_Enrollment
			INNER JOIN Student ON (Course_Enrollment.Student_ID = Student.Student_ID)
			LEFT JOIN Parents ON (Student.Parent_ID = Parents.Parent_ID)
			INNER JOIN Academic_Course ON (Academic_Course.Course_ID = Course_Enrollment.Course_ID)
			WHERE
					Course_Enrollment.Course_ID = "C001" OR
					Academic_Course.Course_Name = "English Literature" OR
					Academic_Course.Teacher_Name = "Ms. Johnson";

III. parents or guardians:

12. View their children's personal information like name, email, phone, address, gender 

SELECT 
Students_ID,
Student_First name , 
Student_Last name,
Student_Email,
Student_Phone,
Student_Address,
Student_DOB,
Student_Gender,
Student.Parent_id,
	
FROM Student
			INNER JOIN Parents ON (Student.Parent_ID = Parents.Parent_ID)
			WHERE
				student.Parent_ID = "P001";
				
13.View and manage their children's course enrolments
SELECT
Course_Enrollment.Student_ID,
Student.First_Name,
Student.Last_Name,
Course_Enrollment.Course_ID,
Academic_Course.Course_Name,
Academic_Course.Teacher_Name,
Academic_Course.Day,

FROM Course_Enrollment
			INNER JOIN Student ON (Course_Enrollment.Student_ID = Student.Student_ID)
			INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
			WHERE 
				Course_Enrollment.Student_ID = "S001" OR
				Student.Parent_ID = "P001";
				
			DELETE FROM Course_Enrollment
			WHERE Course_ID = "C006";
			
			INSERT INTO Course_Enrollment(Student_ID, Course_ID, Enrollment_Date2) VALUES
			("S001", "C007", "7/2/2023");
			
			SELECT
				Course_Enrollment.Student_ID,
				Student.First_Name,
				Student.Last_Name,
				Course_Enrollment.Course_ID,
				Academic_Course.Course_Name,
				Academic_Course.Teacher_Name,
				Academic_Course.Day
			FROM Course_Enrollment
			INNER JOIN Student ON (Course_Enrollment.Student_ID = Student.Student_ID)
			INNER JOIN Academic_Course ON (Course_Enrollment.Course_ID = Academic_Course.Course_ID)
			WHERE 
				Course_Enrollment.Student_ID = "S001" OR
				Student.Parent_ID = "P001";
				

				
	
